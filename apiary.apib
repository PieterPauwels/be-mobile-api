FORMAT: 1A
HOST: http://api.be-mobile.be/v1

# Be-Mobile API
Move smarter together with the Be-Mobile API.

## Audience
      
This document is intended for website and mobile developers who want to compute direction data within maps provided by the Be-Mobile API. It provides an introduction to using the API and reference material on the available parameters.
      
## API Key
      
> **Note**: Business users must include `client` and `signature` parameters with their requests instead of a key.
     
All Directions API applications should use an API key. Including a key in your request:

* Allows you to monitor your application's API usage in the APIs Console.
* Enables per-key instead of per-IP-address quota limits.
* Ensures that Be-Mobile can contact you about your application if necessary.
 
The Directions API uses an API key to identify your application. API keys are managed through the [Be-Mobile API console](https://developers.be-mobile-international.com/api/console). To create your key:

1. Visit the API console at https://developers.be-mobile-international.com/api/console and log in with your Be-Mobile Account.
2. Click the **Services** link from the left-hand menu in the APIs Console, then activate the **Directions API** service.
3. Once the service has been activated, your API key is available from the **API Access** page, in the **Simple API Access** section. Directions API applications use the Key for server apps.

To specify a key in your request, include it as the value of a key parameter.

> **Note**: By default, a key can be used from any server. We strongly recommend that you restrict the use of your key by IP address to servers that you administer. You can specify which IP addresses are allowed to use your API key by clicking the **Edit allowed referers...** link in the API console. HTTPS is enforced for requests that include an API key.

## XML versus JSON

We recommend that you use json as the preferred output flag unless your service requires xml for some reason. Processing XML trees requires some care, so that you reference proper nodes and elements. JSON is lighter, faster and easier to read (both by people and machines).

> The remainder of this documentation will use JSON syntax. In most cases, the output format does not matter for purposes of illustrating concepts or field names in the documentation. However, note that blank elements are indicated through empty arrays in JSON, but by the absence of any such element in XML.

# Group Routeplanner
## Introduction
      
The `routeplanner` endpoint is a service that calculates directions between locations using an HTTP request. You can search for directions for several modes of transportation, include public transport, driving, walking or cycling. 
      
Directions may specify origins, destinations and waypoints either as text strings or as latitude/longitude coordinates. The Routeplanner API can return multi-part directions using a series of waypoints.
      
This service is generally designed for calculating directions for static (known in advance) addresses for placement of application content on a map; this service is **not** designed to respond in real time to user input, for example.
      
Route planning is a time and resource intensive task. Whenever possible, calculate known addresses ahead of time (using the service described here) and store your results in a temporary cache of your own design.
      
## Usage Limits

The Routeplanner API has the following limits in place:

Users of the free API:

* 2,500 requests per 24 hour period.
* Up to 8 waypoints allowed in each request.
* 10 requests per second.

Business Users:

* 100,000 requests per 24 hour period.
* 23 waypoints allowed in each request.
* 10 requests per second.

Routeplanner API URLs are restricted to approximately 2000 characters, after URL Encoding. As some Routeplanner API URLs may involve many locations along a path, be aware of this limit when constructing your URLs.

## Travel Modes

When you calculate directions, you may specify which transportation `mode` to use. By default, directions are calculated as `car` directions. The following travel modes are currently supported:

* `car` (default) indicates standard driving directions using the road network.
* `foot` requests walking directions via pedestrian paths & sidewalks (where available).
* `bicycle` requests bicycling directions via bicycle paths & preferred streets (where available).
* `public_transport` requests directions via public transport (where available).

## Using Waypoints

When calculating routes using the Routeplanner endpoint, you may also specify waypoints for driving, walking or bicycling directions. Waypoints allow you to calculate routes through additional locations, in which case the returned route passes through the given waypoints.

Waypoints are specified within the waypoints parameter and consist of one or more addresses or locations separated by the pipe (|) character.

## Travelling Salesman

By default, the Routeplanner service calculates a route through the provided waypoints in their given order. Optionally, you may pass `optimize:true` as the first argument within the waypoints parameter to allow the Routeplanner service to optimize the provided route by rearranging the waypoints in a more efficient order. This optimization is an application of the [Travelling Salesman Problem](http://en.wikipedia.org/wiki/Travelling_salesman_problem).

If you instruct the Routeplanner service to optimize the order of its waypoints, their order will be returned in the `waypoint_order` field within the routes object. The `waypoint_order` field returns values which are zero-based.

## Avoiding

Directions may be calculated that adhere to certain restrictions. Restrictions are indicated by use of the `avoid` parameter, and an argument to that parameter indicating the restriction to avoid. The following restrictions are supported:

* `tolls`
* `highways`
* `ferries`

It's possible to request a route that avoids any combination of tolls, highways and ferries by passing both restrictions to the avoid parameter. For example: `avoid=tolls|highways|ferries`.

## Region Biasing

You can also set the Routeplanner service to return results biased to a particular region by use of the `region` parameter. This parameter takes a ccTLD (country code top-level domain) argument specifying the region bias. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is "uk" (.co.uk) while its ISO 3166-1 code is "gb" (technically for the entity of "The United Kingdom of Great Britain and Northern Ireland").

Region codes can be concatenated using the pipe symbol (|).

## Routeplanner API Calls [/routeplanner/{format}{?origin,destination,mode,waypoints,alternatives,avoid,region,departure_time,arrival_time,routing_cost,effective_cost,key}]
### Get directions [GET]
+ Parameters
    + format (required, string, `json`) ... `format` may be either of the following values:    
    
        * `json` (recommended) indicates output in JavaScript Object Notation (JSON)
        * `xml` indicates output as XML
        
    + origin (required, string, `Ghent, Belgium or 51.123141|3.1491351`) ... The address or textual latitude/longitude value from which you wish to calculate directions. If you pass an address as a string, the Routeplanner service will geocode the string and convert it to a latitude/longitude coordinate to calculate directions. If you pass coordinates, ensure that no space exists between the latitude and longitude values.

    + destination (required, string, `Brussels, Belgium or 50.63141|4.051351`) ... The address or textual latitude/longitude value from which you wish to calculate directions. If you pass an address as a string, the Routeplanner service will geocode the string and convert it to a latitude/longitude coordinate to calculate directions. If you pass coordinates, ensure that no space exists between the latitude and longitude values.
    
    + mode (optional, string, `bicycle|train`) ... Specifies the mode of transport to use when calculating directions. Values can be pipe-concatenated. Valid values are:
        
        * `foot`
        * `bicycle`
        * `public_transport`
        * `car`
        
    + waypoints (optional, string, `Lokeren|St.-Niklaas`) ... Specifies an array of waypoints. Waypoints alter a route by routing it through the specified location(s). A waypoint is specified as either a latitude/longitude coordinate or as an address which will be geocoded. (For more information on waypoints, see Using Waypoints and Travelling Salesman)
    
    + alternatives (optional, integer, `3`) ... Specifies the number of route alternatives the Routeplanner service may provide. Note that providing route alternatives may increase the response time from the server.
    
    + avoid (optional, string, `toll|highways`) ... Indicates that the calculated route(s) should avoid the indicated features. This parameter supports the following arguments. 
        
        * `tolls` indicates that the calculated route should avoid toll roads/bridges. 
        * `highways` indicates that the calculated route should avoid highways. 
        * `ferries` indicates that the calculated route should avoid ferries.
    
    + region (optional, string, `be`) ... The region code, specified as a ccTLD ("top-level domain") two-character value. (For more information see Region Biasing)
    
    + departure_time (optional, integer, `1412255750`) ... Specifies the desired time of departure as seconds since midnight, January 1, 1970 UTC.
    
    + arrival_time (optional, integer, `1412255750`) ... Specifies the desired time of arrival as seconds since midnight, January 1, 1970 UTC.
    
    + routing_cost (optional, string, `optimal_speed`) ... Routing cost model. Options are 
    
        * `optimal_speed` 
        * `simple_osm`
        * `realtime`
        * `smart`
        * `optimal_alternative`
        * `realtime_alternative`

    + effective_cost (optional, string, `optimal_speed`) ... Effective cost model. Options are 
    
        * `optimal_speed`
        * `simple_osm`
        * `realtime`
        * `smart`
        
    + key (required, string, `BeMoSyB-A8Y82Lsncu9iUQtR-LUooaitdsexsknI`) ... All Routeplanner API applications should use an API key.
    
    
+ Response 200 (application/json)

    + Header

    + Body
    
            {
              "status": "OK",
              "routes": [ {
                "summary": "E40 W",
                "legs": [ {
                  "steps": [ {
                    "travel_mode": "DRIVING",
                    "start_location": {
                      "lat": 41.8507300,
                      "lng": -87.6512600
                    },
                    "end_location": {
                      "lat": 41.8525800,
                      "lng": -87.6514100
                    },
                    "polyline": {
                      "points": "a~l~Fjk~uOwHJy@P"
                    },
                    "duration": {
                      "value": 19,
                      "text": "1 min"
                    },
                    "html_instructions": "Head \u003cb\u003enorth\u003c/b\u003e on \u003cb\u003eS Morgan St\u003c/b\u003e toward \u003cb\u003eW Cermak Rd\u003c/b\u003e",
                    "distance": {
                      "value": 207,
                      "text": "0.1 mi"
                    }
                  },
                  ...
                  ... additional steps of this leg
                ...
                ... additional legs of this route
                  "duration": {
                    "value": 74384,
                    "text": "20 hours 40 mins"
                  },
                  "distance": {
                    "value": 2137146,
                    "text": "1,328 mi"
                  },
                  "start_location": {
                    "lat": 35.4675602,
                    "lng": -97.5164276
                  },
                  "end_location": {
                    "lat": 34.0522342,
                    "lng": -118.2436849
                  },
                  "start_address": "Ghent, Belgium",
                  "end_address": "Brussels, Belgium"
                } ],
                "copyrights": "Map data ©2014 Be-Mobile, Belgium",
                "overview_polyline": {
                  "points": "a~l~Fjk~uOnzh@vlbBtc~@tsE`vnApw{A`dw@~w\\|tNtqf@l{Yd_Fblh@rxo@b}@xxSfytAblk@xxaBeJxlcBb~t@zbh@jc|Bx}C`rv@rw|@rlhA~dVzeo@vrSnc}Axf]fjz@xfFbw~@dz{A~d{A|zOxbrBbdUvpo@`cFp~xBc`Hk@nurDznmFfwMbwz@bbl@lq~@loPpxq@bw_@v|{CbtY~jGqeMb{iF|n\\~mbDzeVh_Wr|Efc\\x`Ij{kE}mAb~uF{cNd}xBjp]fulBiwJpgg@|kHntyArpb@bijCk_Kv~eGyqTj_|@`uV`k|DcsNdwxAott@r}q@_gc@nu`CnvHx`k@dse@j|p@zpiAp|gEicy@`omFvaErfo@igQxnlApqGze~AsyRzrjAb__@ftyB}pIlo_BflmA~yQftNboWzoAlzp@mz`@|}_@fda@jakEitAn{fB_a]lexClshBtmqAdmY_hLxiZd~XtaBndgC"
                },
                "warnings": [ ],
                "waypoint_order": [ 0, 1 ],
                "bounds": {
                  "southwest": {
                    "lat": 34.0523600,
                    "lng": -118.2435600
                  },
                  "northeast": {
                    "lat": 41.8781100,
                    "lng": -87.6297900
                  }
                }
              } ]
            }

# Group Travel Time Matrix

## Introduction 

A travel time is the needed time it takes to travel from origin to destination. A travel time can either be:

* **historic**: for a specific day and timestamp.
* **real time**: based on the current traffic situation.
* **short term prediction**: based on the evolution of the current traffic situation, a prediction can be made for up to 60 minutes.
* **long term prediction**: based on historical averages, a prediction can be made for upcoming days, weeks and months.

A travel time matrix is then the times it will take to get from a set of origins to a set of destinations. Example: A set of broken down cars and a set of dispatching vehicles, or a set of people and a set of taxis. This matrix can even be extended in time, for example to give an average travel time, every quarter of an hour, every day of the week, between a set of warehouses and a set of stores, making the matrix three-dimensional. 

## Optimal Travel Times

A two-dimensional matrix can again be squashed to keep only the optimal travel times. In case the size of the origin and destination sets is different, some of the origins or destinations will be left out. For example: only the closest dispatching vehicles will be sent to the broken down cars, or only the people closest to taxis will actually get a taxi.

## Usage Limits

Calculating a travel time matrix for sets that are bigger that 10x10 is a very time and resource intensive task, even more so if the matrix is extended in time. Therefore, the Travel Time Matrix API has the following limits in place:

Users of the free API:

* 1,000 requests per 24 hour period.
* Up to 30 origins and 30 destinations allowed in each request.
* Maximum depth of the time dimension is 48 (every half hour for 1 day)
* 1 request per 30 seconds.

Business Users:

* 10,000 requests per 24 hour period.
* Up to 300 origins and 300 destinations allowed in each request.
* Maximum depth of the time dimension is 672 (every quarter of an hour for 1 week)
* 1 request per 5 seconds.

## Travel Time Matrix API Calls [/traveltimematrix/{format}]

### Get the matrix [POST]

> This is a POST since the origin-destination matrix can contain a lot of locations, quickly surpassing the 2kb GET limit of some browsers.

+ Parameters
    + format (required, string, `json`) ... `format` may be either of the following values:    
    
        * `json` (recommended) indicates output in JavaScript Object Notation (JSON)
        * `xml` indicates output as XML
        
+ Request (application/json)

    + Header

    + Body
    
            {
              "key": "BeMoSyB-A8Y82Lsncu9iUQtR-LUooaitdsexsknI",
              "type": "historic",
              "from": "2014-10-22T09:00:00Z",
              "to": "2014-10-29T23:00:00Z",
              "interval": 900,
              "optimize": false,
              "origins": [
                {
                  "coordinates": [102.0, 0.5],
                  "properties": {"id": 1, "Organisation": "ACME", "description": "Warehouse North" }
                },
                {
                  "coordinates": [102.0, 0.5],
                  "properties": {"id": 2, "Organisation": "ACME", "description": "Warehouse East" }
                }
              ],
              "destinations": [
                {
                  "coordinates": [102.0, 0.5],
                  "properties": {"id": 1, "Organisation": "ACME", "description": "Shop Center City" }
                },
                {
                  "coordinates": [102.0, 0.5],
                  "properties": {"id": 2, "Organisation": "ACME", "description": "Shop Countryside" }
                },
                {
                  "coordinates": [102.0, 0.5],
                  "properties": {"id": 3, "Organisation": "ACME", "description": "Shop North" }
                },
                {
                  "coordinates": [102.0, 0.5],
                  "properties": {"id": 4, "Organisation": "ACME", "description": "Shop South" }
                },
              ],
            }

+ Response 200 (application/json)

    + Header

    + Body
    
            {
              "status": "OK",
              "matrix": [
                {
                  "timestamp": "2014-10-22T09:00:00Z",
                  "pairs": [
                    {
                      "properties": {"id": 1, "Organisation": "ACME", "description": "Warehouse North" }
                      "traveltimes": [
                        {"id": 1, "Organisation": "ACME", "description": "Shop Center City", "time": "15810" },
                        {"id": 2, "Organisation": "ACME", "description": "Shop Countryside", "time": "22111" },
                        {"id": 3, "Organisation": "ACME", "description": "Shop North", "time": "8624" },
                        {"id": 4, "Organisation": "ACME", "description": "Shop South", "time": "18624" }
                      ]
                    },
                    {
                      "properties": {"id": 2, "Organisation": "ACME", "description": "Warehouse East" }
                      "traveltimes": [
                        {"id": 1, "Organisation": "ACME", "description": "Shop Center City", "time": "13810" },
                        {"id": 2, "Organisation": "ACME", "description": "Shop Countryside", "time": "32111" },
                        {"id": 3, "Organisation": "ACME", "description": "Shop North", "time": "14624" },
                        {"id": 4, "Organisation": "ACME", "description": "Shop South", "time": "16624" }
                      ]
                    }
                  ]
                },
                {
                  "timestamp": "2014-10-22T09:15:00Z",
                  "pairs": [
                  ... same pairs with different travel times
                  ]
                },
                ... additional timestamps, each with origin destination pairs
              ]
            }



# Group Accessibility

## Introduction 

Accessibility gives you area that can be reached within a certain time from a location at a certain moment. Alternatively, it gives you the area from which a certain location can be reached within a certain time.

The size of the reachable area can fluctuate heavily depending on traffic congestion.

## Saving locations
 
You can save a number of locations to be able to quickly see if they are reachable or not at a certain moment. These locations are associated with your API key. 

> **Note**: An update of your locations will erase any previous locations you have saved.

## Date and time

The `accessibility` endpoint enables you to request the reachable area for both options on *typical* (averaged) days, for example, 'A typical monday' as well as for days in the past or real time.

* For a **typical day**, fill in the `typeday` and `time` parameters. 
* For a **moment in the past**, fill in `date` and `time` parameters.
* For a **real time** calculation, leave out parameters `typeday`, `date` and `time`.

## Accessibility API Calls [/accessibility/{format}{?location,direction,mode,typeday,date,time,time_underway,visualisation,key}]

### Get area [GET]

+ Parameters
    + format (required, string, `json`) ... `format` may be either of the following values:    
    
        * `json` (recommended) indicates output in JavaScript Object Notation (JSON)
        * `xml` indicates output as XML
        
    + location (optional, string, `Ghent, Belgium or 51.123141|3.1491351`) ... The address or textual latitude/longitude value that is the origin or destination (depending on the `direction`) of the accesible area. If you pass an address as a string, the Accessibility service will geocode the string and convert it to a latitude/longitude coordinate to calculate directions. If you pass coordinates, ensure that no space exists between the latitude and longitude values. If **no location** is given, calculations will be done for all saved locations.

    + direction (optional, string, `from`) ... `direction` indicates whether the given `location` is the origin of the destination of the reachable area. This makes a difference for the time it takes between the saved locations and the asked location. (See 'Storing locations'). If no direction is given, no calculations will be done for saved locations. In this case, `visualisation` will automatically be `true`. Options are

        * `from` to indicate a start from the given `location`
        * `to` to indicate starting from saved locations and trying to reach the given `location` within `time_underway`

    + mode (optional, string, `bicycle|train`) ... Specifies the mode of transport to use when calculating directions. Values can be pipe-concatenated. Default is `car`. Valid values are:
        
        * `foot`
        * `bicycle`
        * `public_transport`
        * `car`
        
    + typeday (optional, string, `monday`) ... Typical day for which the calculation is done. Options are: 

        * `monday`
        * `tuesday`
        * `wednesday`
        * `thursday`
        * `friday`
        * `saturday`
        * `sunday`

    + date (optional, string, `2014-`) ... Historical day for which the calculation is done. Format is `YYYY-MM-DD`.

    + time (optional, string, `23:00`) ... At what time the reachable area should be calculated. A time during rush hour will usually give very different results from the middle of the night. Format is `HH:mm`, with `HH` ranging from `00` to `23` and `mm` ranging from `00` to `59`. Times are in UTC.

    + time_underway (optional, integer, `3600`) ... The time in seconds that can be spend underway trying to reach an area or the saved locations. Default is 5400 (1,5 hours).

    + visualisation (optional, string, `true`) ... If set to `true`, specifies that the Accessibility service returns a visual representation of the accessible areas. Calculation the visualisation is a time and resource intensive task. Default value is `false`, unless the `direction` parameter is set to `true`.

    + key (required, string, `BeMoSyB-A8Y82Lsncu9iUQtR-LUooaitdsexsknI`) ... All Accessibility API applications should use an API key.

+ Response 200 (application/json)

    + Header

    + Body
    
            {
              "status": "OK",
              "locations": {
                "type": "FeatureCollection",
                  "features": [
                    {
                      "type": "Feature",
                      "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
                      "properties": {"Organisation": "ACME", "description": "Warehouse North", "time": 4231 }
                    },
                    {
                      "type": "Feature",
                      "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
                      "properties": {"Organisation": "ACME", "description": "Warehouse East", "time": 805 }
                    }
                  ]
                }
              }
              "visualisation": {
                "type": "FeatureCollection",
                "features": [
                { 
                  "type": "Feature",
                   "geometry": {
                     "type": "Polygon",
                     "coordinates": [
                       [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],
                         [100.0, 1.0], [100.0, 0.0] ]
                       ]
                   },
                   "properties": {
                     "time": 1800,
                     "position": 1
                     }
                  },
                { 
                  "type": "Feature",
                   "geometry": {
                     "type": "Polygon",
                     "coordinates": [
                       [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],
                         [100.0, 1.0], [100.0, 0.0] ]
                       ]
                   },
                   "properties": {
                     "time": 3600,
                     "position": 2
                     }
                  }
                ]
              }
            }

## Location API Calls [/accessibility/locations/{format}{?key}]

### Get locations [GET]

+ Parameters
    + format (required, string, `json`) ... `format` may be either of the following values:    
    
        * `json` (recommended) indicates output in JavaScript Object Notation (JSON)
        * `xml` indicates output as XML
        
    + key (required, string, `BeMoSyB-A8Y82Lsncu9iUQtR-LUooaitdsexsknI`) ... All Accessibility API applications should use an API key.

+ Response 200 (application/json)

    + Header

    + Body
    
            {
              "status": "OK",
              "locations": {
                "type": "FeatureCollection",
                  "features": [
                    {
                      "type": "Feature",
                      "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
                      "properties": {"Organisation": "ACME", "description": "Warehouse North", "time": 4231 }
                    },
                    {
                      "type": "Feature",
                      "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
                      "properties": {"Organisation": "ACME", "description": "Warehouse East", "time": 805 }
                    }
                  ]
                }
              }
            }

### Save locations [POST]

+ Request (application/json)

    + Header

    + Body
    
            {
              "key": "BeMoSyB-A8Y82Lsncu9iUQtR-LUooaitdsexsknI",
              "locations": [
                {
                  "coordinates": [102.0, 0.5],
                  "properties": {"Organisation": "ACME", "description": "Warehouse North" }
                },
                {
                  "coordinates": [102.0, 0.5],
                  "properties": {"Organisation": "ACME", "description": "Warehouse East" }
                }
              ]
            }

+ Response 201

    + Header

    + Body
    
            {
              "status": "OK",
              "locations": {
                "type": "FeatureCollection",
                  "features": [
                    {
                      "type": "Feature",
                      "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
                      "properties": {"Organisation": "ACME", "description": "Warehouse North" }
                    },
                    {
                      "type": "Feature",
                      "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
                      "properties": {"Organisation": "ACME", "description": "Warehouse East" }
                    }
                  ]
                }
              }
            }