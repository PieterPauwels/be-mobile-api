# Group Travel Time

## Functional Description 

A travel time is the needed time it takes to travel from origin to destination. A travel time can either be:

* **historic**: for a specific day and timestamp.
* **real time**: based on the current traffic situation.
* **short term prediction**: based on the evolution of the current traffic situation, a prediction can be made for up to 60 minutes.
* **long term prediction**: based on historical averages, a prediction can be made for upcoming days, weeks and months.

### Options

#### Departure time

Departure time can be in the past, be omitted, or be in the future. The travel time endpoint will automatically return accurate historic data, real time information or a short or long term prediction based on the evolution of the current traffic situation or averaged historical data respectively.

#### Intervals

You can also get a list af travel times, each some time apart, to see what the impact of a diffirent departure time is on the travel time. This way, you can see the evolution af the travel time between twe points throughout the day.

> **Example**: Visualise how the travel time between Amsterdam and Brussels evolves every quarter of an hour when the departure time is between 06:00 and 11:00.

## Technical Description

### Travel Time API Calls [/traveltime/{format}{?origin,destination,departure_time,interval,steps,key}]

#### Get travel time for single route [GET]

This call gets the travel time for a single route. The travel time can be calculated for a number of steps after the original `departure_time` to get an overview of the impact of different departure times on the travel time.

+ Parameters
    + format (required, string, `json`) ... `format` may be either of the following values:    
    
        * `json` (recommended) indicates output in JavaScript Object Notation (JSON)
        * `xml` indicates output as XML
        
    + origin (required, string, `Ghent, Belgium or 51.055|3.715`) ... The address or textual latitude/longitude value from which you wish to calculate directions. If you pass an address as a string, the Routeplanner service will geocode the string and convert it to a latitude/longitude coordinate to calculate directions. If you pass coordinates, ensure that no space exists between the latitude and longitude values.

    + destination (required, string, `Brussels, Belgium or 50.85|4.35`) ... The address or textual latitude/longitude value from which you wish to calculate directions. If you pass an address as a string, the Routeplanner service will geocode the string and convert it to a latitude/longitude coordinate to calculate directions. If you pass coordinates, ensure that no space exists between the latitude and longitude values.

    + departure_time (optional, string, `2014-10-22T09:00:00Z`) ... Specifies the desired time of departure in UTC. Format is `YYYY-MM-DDTHH:mm:ssZ`. 

        * If `departure_time` is in the past, a historic travel time is returned. 
        * If `departure_time` is omitted, the travel time based an the current, *real time* traffic situation is returned.
        * If `departure_time` is in the future, short term or long term predictions are used to calculate the travel time, depending on how far the `departure_time` is in the future. If this is less than 60 minutes, real time traffic evolutien is used, otherwise the calculation is based on averaged historical data.

    + interval (optional, integer, `15`) ... The interval in minutes between every time step. If `interval` is specified, `steps` should be specified as well, otherwise this parameter is ignored.
    
    + steps (optional, integer, `100`) ... The number of steps in the time dimension. If `steps` is specified, `interval` should be specified as well, otherwise this parameter is ignored.

    + key (required, string, `BeMoSyB-A8Y82Lsncu9iUQtR-LUooaitdsexsknI`) ... All Be-Mobile API applications should use an API key.

+ Response 200 (application/json)

    + Header

    + Body
    
            {
              "status": "OK",
              "type": "long term prediction",
              "matrix": [
                {
                  "timestamp": "2014-10-22T09:00:00Z",
                  "origin": { "lat": , "lng": , "address": }
                  "destination": { "lat": , "lng": , "address": }
                  "traveltime": 2490
                },
                {
                  "timestamp": "2014-10-22T09:15:00Z",
                  // ... same pair with different travel time
                },
                // ... additional timestamps
              ]
            }
